[build-system]
build-backend = "mesonpy"
requires = [
    "meson-python",
    "pybind11>=3",
]

[project]
name = "pymetis"
version = "2025.1.1"
description = "A graph partitioning package"
readme = "README.rst"
license = "MIT AND Apache-2.0"
maintainers = [ { name = "Andreas Kloeckner", email = "inform@tiker.net" } ]
authors = [ { name = "Andreas Kloeckner", email = "inform@tiker.net" } ]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "typing-extensions>=4.5",
]

[project.optional-dependencies]
doc = [
    "furo",
    "sphinx>=4",
    "sphinx-copybutton",
]
test = [
    "numpy",
    # NOTE: used for mesh generation in tests
    "meshpy",
    "pytest",
    "ruff",
    "typos",
]

[project.urls]
Documentation = "https://documen.tician.de/pymetis"
Repository = "https://github.com/inducer/pymetis"

[tool.inducer-ci-support]
disable-editable-pip-install = true

[tool.ruff]
preview = true

[tool.ruff.lint]
extend-select = [
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "E",    # pycodestyle
    "F",    # pyflakes
    "G",    # flake8-logging-format
    "I",    # flake8-isort
    "N",    # pep8-naming
    "NPY",  # numpy
    "Q",    # flake8-quotes
    "RUF",  # ruff
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "TC",
]
extend-ignore = [
    "C90",  # McCabe complexity
    "E241", # multiple spaces after comma
    "E242", # tab after comma
    "E402", # module level import not at the top of file
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
docstring-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
known-local-folder = ["pymetis"]
lines-after-imports = 2
combine-as-imports = true

[tool.typos.default]
extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:\\s*disable-line$"
]

[tool.typos.default.extend-words]
nd = "nd"

[tool.typos.files]
extend-exclude = [
    "src/metis"
]

[tool.cibuildwheel]
skip = "*-win-* [cp]p3[67]-*"

[tool.basedpyright]
reportImplicitStringConcatenation = "none"
reportUnnecessaryIsInstance = "none"
reportUnusedCallResult = "none"
reportExplicitAny = "none"
reportUnreachable = "hint"

exclude = [
    "doc",
    ".conda-root",
    "build",
    ".env",
]

# This reports even cycles that are qualified by 'if TYPE_CHECKING'. Not what
# we care about at this moment.
# https://github.com/microsoft/pyright/issues/746
reportImportCycles = "none"
pythonVersion = "3.10"
pythonPlatform = "All"

[[tool.basedpyright.executionEnvironments]]
root = "test"
reportArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportMissingImports = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "hint"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownLambdaType = "hint"
reportOperatorIssue = "hint"
reportPossiblyUnboundVariable = "hint"
reportPrivateUsage = "none"
reportUnusedImport = "hint"
reportIndexIssue = "hint"
reportAny = "hint"

